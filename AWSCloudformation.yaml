---
AWSTemplateFormatVersion: "2010-09-09"
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Statgarten-Cluster
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: statgarten
      ContainerDefinitions:
        - Name: statgarten
          Image: dao0312/statgarten:latest
          PortMappings:
            - ContainerPort: 80
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: my-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref VpcPublicSubnet1
            - !Ref VpcPublicSubnet2
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic to ECS containers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  VpcPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-northeast-2a
  VpcPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-northeast-2a
  VpcId:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16


Resources:
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTP traffic'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  MyInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0c94855ba95c71c99' # Replace with the AMI ID for your region and instance type
      InstanceType: 't2.micro'
      SecurityGroupIds:
        - !Ref 'MySecurityGroup'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker
          systemctl start docker
          docker run -d -p 80:8000 dao0312/statgarten

Outputs:
  MyInstancePublicIp:
    Value: !GetAtt 'MyInstance.PublicIp'

    Resources:
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTP traffic'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  MyKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: 'my-keypair'
      PublicKeyMaterial: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5ix9E9vJcK7W8+Hd50wyzWhiGjvq3M7Q2PKx...'

  MyInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0c94855ba95c71c99' # Replace with the AMI ID for your region and instance type
      InstanceType: 't2.micro'
      KeyName: !Ref 'MyKeyPair'
      SecurityGroupIds:
        - !Ref 'MySecurityGroup'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker
          systemctl start docker
          docker run -d -p 80:8000 dao0312/statgarten

Outputs:
  MyInstancePublicIp:
    Value: !GetAtt 'MyInstance.PublicIp'